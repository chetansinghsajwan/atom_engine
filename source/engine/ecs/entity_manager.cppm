export module atom.engine:ecs.entity_manager;

import entt;
import :box2d;
import atom.core;
import :time;
import :ecs.entity;
import :ecs.transform_component;

namespace atom::engine
{
    export class world;

    /// --------------------------------------------------------------------------------------------
    ///
    /// --------------------------------------------------------------------------------------------
    export class entity_manager
    {
    public:
        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        entity_manager(class world* world);

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        ~entity_manager();

    public:
        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        auto create_entity(string_view name) -> entity*;

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        auto destroy_entity(class entity* entity) -> void;

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        auto view_all() -> decltype(auto);

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        template <typename... component_types, typename function_type>
        auto for_each_with_components(function_type&& func) -> void
        {
            return _registry.view<component_types...>().each(forward<function_type>(func));
        }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        auto get_world() -> world*;

        // /// ----------------------------------------------------------------------------------------
        // /// 
        // /// ----------------------------------------------------------------------------------------
        // auto subscribe_events(entity_event_listener* listener) -> void;

        // /// ----------------------------------------------------------------------------------------
        // /// 
        // /// ----------------------------------------------------------------------------------------
        // auto unsubscribe_events(entity_event_listener* listener) -> void;

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        auto get_internal() -> entt::registry*;

    private:
        entt::registry _registry;
        world* _world;
    };
}
